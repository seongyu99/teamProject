import cv2
import tensorflow as tf

batch_size = 32
img_height = 180
img_width = 180

face_classifier = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')
def face_detector(img, size=0.5):
  gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
  faces = face_classifier.detectMultiScale(gray, 1.3, 5)
  if faces is ():
    return img, []
  for (x, y, w, h) in faces:
    cv2.rectangle(img, (x, y), (x + w, y + h), (0, 255, 255), 2)
    roi = img[y:y + h, x:x + w]
    roi = cv2.resize(roi, (200, 200))
  return img, roi
model = cv2.face.LBPHFaceRecognizer_create()

cap = cv2.VideoCapture(0)

while True:
  ret, frame = cap.read()
  image, face = face_detector(frame)
  if not ret: continue

  face_input = cv2.cvtColor(frame, cv2.COLOR_BGR2RGB)
  face_output = cv2.resize(face_input, (img_height, img_width))
  face_array = tf.expand_dims(face_output, 0)

  img_model = tf.keras.models.load_model('C:/Users/PC/Desktop/faces/train/lsk/model')
  predict = img_model.predict(face_array)
  print(predict[0][0])
  num = int(int(predict[0][0]) - 200)
  if 5 < num < 15:
    cv2.putText(image, "Unlocked", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 255, 0), 2)
    cv2.imshow('Face Cropper', image)
  else:
    cv2.putText(image, "Locked", (250, 450), cv2.FONT_HERSHEY_COMPLEX, 1, (0, 0, 255), 2)
    cv2.imshow('Face Cropper', image)

  if cv2.waitKey(1) == 13:
    break
